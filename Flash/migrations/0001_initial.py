# Generated by Django 3.2.15 on 2025-03-26 10:04

import Flash.models
import bson.objectid
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import djongo.models.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer_text', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='CheckStatement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('statement', models.CharField(max_length=255)),
                ('created_by', models.EmailField(max_length=100)),
                ('created_date', models.DateTimeField(auto_now=True)),
                ('question_type', models.CharField(choices=[('MCQ', 'Multiple Choice Question'), ('FIB', 'Fill in the Blanks'), ('SUB', 'Subjective'), ('TRUEFALSE', 'True or False'), ('IMAGE', 'Diagram Study')], max_length=15)),
                ('explanation', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('flashcard_type', models.CharField(choices=[('MCQ', 'Multiple Choice Question'), ('FIB', 'Fill in the Blanks'), ('SUB', 'Subjective'), ('TRUEFALSE', 'True or False'), ('IMAGE', 'Diagram Study')], default='MCQ', max_length=15)),
                ('flashcard_id', models.CharField(max_length=255)),
                ('feedback', models.CharField(blank=True, choices=[('easily recalled', 'Easily Recalled'), ('partially recalled', 'Partially Recalled'), ('forgot', 'Forgot'), ('skip', 'Skip'), ('recalled with effort', 'Recalled With Effort')], max_length=21)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='File',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('created_by', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='FillAnswers',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='FillQuestions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('statement', models.CharField(max_length=255)),
                ('created_by', models.EmailField(max_length=100)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('question_type', models.CharField(choices=[('MCQ', 'Multiple Choice Question'), ('FIB', 'Fill in the Blanks'), ('SUB', 'Subjective'), ('TRUEFALSE', 'True or False'), ('IMAGE', 'Diagram Study')], max_length=15)),
                ('explanation', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='Folder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('type', models.CharField(default='folder', max_length=50)),
                ('created_by', models.CharField(blank=True, max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='InvalidToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.CharField(max_length=255)),
                ('token', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'invalid_tokens',
            },
        ),
        migrations.CreateModel(
            name='MCQAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer_text', models.CharField(max_length=255)),
                ('is_correct', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='MCQuestion',
            fields=[
                ('id', models.CharField(default=Flash.models.MCQuestion.generate_object_id, editable=False, max_length=200, primary_key=True, serialize=False)),
                ('statement', models.CharField(max_length=255)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.CharField(blank=True, max_length=255)),
                ('question_type', models.CharField(choices=[('MCQ', 'Multiple Choice Question'), ('FIB', 'Fill in the Blanks'), ('SUB', 'Subjective'), ('TRUEFALSE', 'True or False'), ('IMAGE', 'Diagram Study')], max_length=15)),
                ('explanation', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='OneTimePassword',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(default='', max_length=6, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('statement', models.CharField(max_length=255)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.CharField(max_length=255)),
                ('question_type', models.CharField(choices=[('MCQ', 'Multiple Choice Question'), ('FIB', 'Fill in the Blanks'), ('SUB', 'Subjective'), ('TRUEFALSE', 'True or False'), ('IMAGE', 'Diagram Study')], max_length=15)),
                ('answers', models.TextField()),
                ('explanation', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Quiz',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(default='Admin', max_length=50)),
                ('total_questions', models.IntegerField(default=0)),
                ('attempted_questions', models.IntegerField(default=0)),
                ('correct_answers', models.IntegerField(default=0)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('ended_at', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ReviewSchedule',
            fields=[
                ('_id', djongo.models.fields.ObjectIdField(auto_created=True, default=bson.objectid.ObjectId, primary_key=True, serialize=False)),
                ('flashcard_id', models.CharField(max_length=255)),
                ('flashcard_type', models.CharField(max_length=15)),
                ('next_review_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('created_by', models.CharField(max_length=100)),
                ('last_feedback', models.CharField(default='new', max_length=50)),
                ('review_count', models.IntegerField(default=0)),
                ('ease_factor', models.FloatField(default=2.5)),
                ('interval', models.IntegerField(default=0)),
            ],
            options={
                'db_table': 'review_schedule',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='UserSession',
            fields=[
                ('id', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('user_id', models.CharField(max_length=255)),
                ('login_time', models.DateTimeField(auto_now_add=True)),
                ('logout_time', models.DateTimeField(blank=True, null=True)),
                ('duration', models.DurationField(blank=True, null=True)),
                ('session_status', models.CharField(default='active', max_length=20)),
            ],
            options={
                'db_table': 'user_sessions',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('_id', djongo.models.fields.ObjectIdField(auto_created=True, editable=False, primary_key=True, serialize=False)),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('email', models.EmailField(max_length=255, unique=True, verbose_name='Email Address')),
                ('first_name', models.CharField(max_length=100, verbose_name='First Name')),
                ('last_name', models.CharField(max_length=100, verbose_name='Last Name')),
                ('is_staff', models.BooleanField(default=False)),
                ('is_superuser', models.BooleanField(default=False)),
                ('is_verified', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('date_joined', models.DateTimeField(auto_now_add=True)),
                ('last_login', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UploadedImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='images/')),
                ('created_by', models.CharField(max_length=100)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('question_type', models.CharField(choices=[('MCQ', 'Multiple Choice Question'), ('FIB', 'Fill in the Blanks'), ('SUB', 'Subjective'), ('TRUEFALSE', 'True or False'), ('IMAGE', 'Diagram Study')], max_length=15)),
                ('folder', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='upload_images', to='Flash.folder')),
                ('tags', models.ManyToManyField(blank=True, related_name='upload_images', to='Flash.Tag')),
            ],
        ),
        migrations.CreateModel(
            name='TrueFalse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ans', models.CharField(max_length=100)),
                ('folder', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='true_false', to='Flash.folder')),
                ('statement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='Flash.checkstatement')),
            ],
        ),
        migrations.CreateModel(
            name='ReviewSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('flashcard_id', models.CharField(max_length=255)),
                ('flashcard_type', models.CharField(choices=[('MCQ', 'MCQ'), ('FIB', 'FIB'), ('SUB', 'SUB'), ('TRUEFALSE', 'TRUEFALSE')], max_length=50)),
                ('time_spent', models.FloatField(help_text='Time spent on the flashcard in hours')),
                ('reviewed_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddIndex(
            model_name='reviewschedule',
            index=models.Index(fields=['next_review_date'], name='review_sche_next_re_56331f_idx'),
        ),
        migrations.AddIndex(
            model_name='reviewschedule',
            index=models.Index(fields=['created_by'], name='review_sche_created_e1f7d2_idx'),
        ),
        migrations.AddIndex(
            model_name='reviewschedule',
            index=models.Index(fields=['flashcard_id', 'flashcard_type'], name='review_sche_flashca_647dcf_idx'),
        ),
        migrations.AddField(
            model_name='quiz',
            name='folder',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Flash.folder'),
        ),
        migrations.AddField(
            model_name='question',
            name='folder',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='Flash.folder'),
        ),
        migrations.AddField(
            model_name='question',
            name='tags',
            field=models.ManyToManyField(blank=True, related_name='questions', to='Flash.Tag'),
        ),
        migrations.AddField(
            model_name='onetimepassword',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='mcquestion',
            name='folder',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='mc_questions', to='Flash.folder'),
        ),
        migrations.AddField(
            model_name='mcquestion',
            name='tags',
            field=models.ManyToManyField(blank=True, related_name='mc_questions', to='Flash.Tag'),
        ),
        migrations.AddField(
            model_name='mcqanswer',
            name='folder',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='mcq_answers', to='Flash.folder'),
        ),
        migrations.AddField(
            model_name='mcqanswer',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='Flash.mcquestion'),
        ),
        migrations.AddField(
            model_name='folder',
            name='parent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subfolders', to='Flash.folder'),
        ),
        migrations.AddField(
            model_name='fillquestions',
            name='folder',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='fill_questions', to='Flash.folder'),
        ),
        migrations.AddField(
            model_name='fillquestions',
            name='tags',
            field=models.ManyToManyField(blank=True, related_name='fill_questions', to='Flash.Tag'),
        ),
        migrations.AddField(
            model_name='fillanswers',
            name='folder',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='fill_answers', to='Flash.folder'),
        ),
        migrations.AddField(
            model_name='fillanswers',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='Flash.fillquestions'),
        ),
        migrations.AddField(
            model_name='file',
            name='folder',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='files', to='Flash.folder'),
        ),
        migrations.AddField(
            model_name='checkstatement',
            name='folder',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='check_statements', to='Flash.folder'),
        ),
        migrations.AddField(
            model_name='checkstatement',
            name='tags',
            field=models.ManyToManyField(blank=True, related_name='check_statements', to='Flash.Tag'),
        ),
        migrations.AddField(
            model_name='answer',
            name='folder',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='Flash.folder'),
        ),
        migrations.AddField(
            model_name='answer',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='related_answers', to='Flash.question'),
        ),
        migrations.AddConstraint(
            model_name='question',
            constraint=models.UniqueConstraint(fields=('created_by', 'statement'), name='unique_created_by_statement'),
        ),
        migrations.AddConstraint(
            model_name='mcquestion',
            constraint=models.UniqueConstraint(fields=('created_by', 'statement'), name='unique_created_by_statemet'),
        ),
    ]
